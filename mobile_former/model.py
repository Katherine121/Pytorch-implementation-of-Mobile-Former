import torch
import torch.nn as nn

from torch.nn import init
import torch.nn.functional as F

from mobile_former.mobile import Mobile, MobileDown
from mobile_former.former import Former
from mobile_former.bridge import Former2Mobile


class hswish(nn.Module):
    def forward(self, x):
        out = x * F.relu6(torch.add(x, 3.0)) / 6.0
        return out


class BaseBlock(nn.Module):
    def __init__(self, inp, exp, out, se, stride, heads, dim):
        super(BaseBlock, self).__init__()
        if stride == 2:
            self.mobile = MobileDown(3, inp, exp, out, stride)
        else:
            self.mobile = Mobile(3, inp, exp, out, stride)
        self.former = Former(dim=dim)
        self.former2mobile = Former2Mobile(dim=dim, heads=heads, channel=out)

    def forward(self, x, z):
        # z_out = self.former(z)
        x_hid = self.mobile(x)
        x_out = self.former2mobile(x_hid, z)
        return x_out, z


class MobileFormer(nn.Module):
    def __init__(self, cfg):
        super(MobileFormer, self).__init__()
        # 初始化6*192token
        self.token = nn.Parameter(nn.Parameter(torch.randn(1, cfg['token'], cfg['embed'])))

        # stem 3 224 224 -> 16 112 112
        self.stem = nn.Sequential(
            nn.Conv2d(3, cfg['stem'], kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(cfg['stem']),
            nn.ReLU()
        )
        # bneck 先*2后还原，步长为1，组卷积
        self.bneck = nn.Sequential(
            nn.Conv2d(cfg['stem'], cfg['bneck']['e'], kernel_size=3, stride=cfg['bneck']['s'], padding=1),
            nn.ReLU(),
            nn.Conv2d(cfg['bneck']['e'], cfg['bneck']['o'], kernel_size=1, stride=1),
            nn.BatchNorm2d(cfg['bneck']['o'])
        )

        # body
        self.block = nn.ModuleList()
        for kwargs in cfg['body']:
            # 把{'inp': 12, 'exp': 72, 'out': 16, 'stride': 2, 'heads': 2}和token维度192传进去
            self.block.append(BaseBlock(**kwargs, dim=cfg['embed']))

        inp = cfg['body'][-1]['out']
        exp = cfg['body'][-1]['exp']
        self.conv = nn.Conv2d(inp, exp, kernel_size=1, stride=1, padding=0, bias=False)
        self.bn = nn.BatchNorm2d(exp)
        self.avg = nn.AvgPool2d((7, 7))

        self.head1 = nn.Linear(exp + cfg['embed'], cfg['fc1'])
        self.relu = nn.ReLU()
        self.head2 = nn.Linear(cfg['fc1'], cfg['fc2'])

        self.init_params()

    def init_params(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    init.constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                init.constant_(m.weight, 1)
                init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.normal_(m.weight, std=0.001)
                if m.bias is not None:
                    init.constant_(m.bias, 0)

    def forward(self, x):
        # batch_size
        b = x.shape[0]
        # 因为最开始初始化的是1*6*192，在0维度重复b次，1维度重复1次，2维度重复1次，就形成了b*6*192
        # z = self.token.repeat(b, 1, 1)
        token = torch.Tensor([[[ 1.2252e-03,  1.4470e-03, -2.1455e-04, -1.9626e-01, -4.2209e-04,
          -1.8699e-01,  1.5734e-03, -2.6261e-04,  4.9292e-04, -1.9031e-03,
          -1.1863e-03, -1.4992e-04, -7.8491e-04, -1.4473e-03, -1.6832e-04,
           1.8775e-03, -4.2882e-04,  1.6708e-03, -4.6760e-04, -1.5334e-03,
           1.7490e-03,  6.3215e-05,  9.4525e-05, -5.7449e-04, -1.5412e-04,
           4.3316e-04, -1.6193e-03, -1.3711e-03, -9.9686e-04, -3.3982e-04,
          -5.5582e-04, -7.0676e-03, -1.6892e-04,  7.9098e-04,  1.4641e-03,
           2.2982e-04,  1.6147e-03,  2.1453e-04, -3.0756e-04, -1.5648e-03,
          -1.2908e-03, -2.4359e-04,  9.3213e-04, -5.4439e-04,  5.7631e-04,
          -8.7864e-04, -7.6041e-04, -2.4975e-04, -2.9841e-05, -1.8236e-03,
          -1.5025e-03, -7.5080e-04, -1.0612e-03,  2.4340e-05, -7.6473e-04,
          -4.1112e-06,  1.3433e-03,  2.2770e-05, -1.0675e-03, -9.6888e-04,
          -1.3718e-03, -6.0373e-04,  1.3546e-03, -1.1969e-03, -7.2324e-04,
          -6.1140e-04, -2.2209e-03, -8.0167e-04,  1.9614e-01, -2.7517e-04,
           1.5516e-03,  1.3722e-03,  4.5811e-04,  1.2460e-03, -7.0876e-04,
          -2.7423e-03, -2.0191e-03,  6.7450e-04, -1.0072e-03,  1.9610e-01,
          -1.3945e-03, -3.0766e-04, -6.6419e-04,  1.7134e-04, -4.8797e-04,
           1.3104e-03, -1.3404e-04, -1.9597e-01, -6.9438e-04,  5.6171e-05,
          -1.2704e-04, -1.0869e-03, -8.2062e-04, -2.0137e-04, -9.9039e-04,
           8.1223e-04, -1.0551e-03,  1.2447e-03, -5.9156e-04,  8.5739e-04,
           1.0473e-03, -2.6932e-04,  3.5902e-04, -1.1157e-03, -1.9370e-04,
          -1.1528e-04, -1.4823e-03, -1.5754e-03,  1.8809e-03,  7.8501e-04,
          -1.7289e-03, -8.7900e-04,  6.6255e-04,  1.9630e-01, -1.4183e-04,
          -5.6114e-03,  5.0062e-04, -1.9587e-01,  1.3760e-03, -3.9344e-04,
           8.4740e-04, -7.5501e-04,  4.7325e-04, -2.1420e-03, -2.8049e-03,
           2.3161e-04, -1.7437e-03, -1.5659e-05, -2.9400e-04, -1.9597e-01,
          -2.5416e-06, -8.4349e-04,  5.9207e-04, -3.6416e-04, -2.5589e-03,
           3.6015e-05, -2.5879e-03,  4.0159e-04,  3.5420e-04,  4.0168e-04,
          -1.7110e-03, -1.0963e-03, -1.5954e-03,  6.1583e-04, -1.0532e-03,
          -1.3100e-02, -1.4873e-03, -4.9905e-04, -2.4095e-04, -5.5531e-04,
          -1.0334e-03, -4.2369e-03,  1.3249e-03, -1.2024e-03, -1.3858e-03,
          -6.3731e-04,  4.3892e-04,  3.6494e-05,  1.3431e-04, -8.3964e-04,
          -6.5803e-06, -2.1870e-04, -7.7227e-04, -1.5352e-03,  2.3678e-04,
          -1.1911e-03,  9.7683e-04, -9.1193e-03, -8.1007e-04, -5.2579e-04,
           1.2904e-03, -4.4526e-04, -3.9515e-04, -1.5022e-04,  8.0369e-04,
          -1.9035e-03,  2.3330e-03,  2.9060e-04, -1.5474e-03, -2.0060e-03,
          -1.0250e-04, -1.8599e-04, -1.7107e-04, -6.0884e-04, -5.0414e-03,
          -5.1212e-04,  7.0382e-05,  8.4730e-05, -6.4568e-04, -1.5794e-03,
          -2.9110e-04, -1.6691e-03],
         [ 1.0972e-03, -1.1165e-03, -1.0345e-03,  9.5733e-02, -9.7108e-04,
           9.1861e-02, -7.3353e-04, -1.0290e-03,  4.7540e-04,  9.8906e-04,
           1.8001e-03,  6.2462e-04,  3.3651e-04,  3.4035e-05, -7.7519e-04,
          -1.4343e-05, -4.7466e-04, -2.4286e-04,  3.5066e-04, -4.9842e-04,
          -2.3208e-03, -4.3045e-04, -9.0318e-04,  1.2889e-03, -1.2786e-04,
           1.1952e-03, -6.0072e-04,  2.1420e-03,  5.3353e-05, -4.8744e-05,
          -4.4551e-04,  2.0202e-03, -4.2160e-04,  2.4695e-04, -5.9762e-04,
           8.7488e-04, -1.0610e-03,  1.8915e-03,  7.1039e-04,  1.1956e-03,
           3.1465e-04,  3.1654e-04, -6.0554e-04,  9.0495e-04,  3.0542e-04,
           7.8161e-04,  5.4424e-04, -3.0932e-04,  5.1568e-04, -9.6413e-04,
           5.4996e-04,  2.2547e-04,  1.6410e-04, -5.2234e-04,  1.3775e-04,
          -1.2294e-03,  1.3066e-03,  1.8376e-04, -6.5164e-05,  1.1390e-03,
           5.8659e-04, -8.2916e-04, -1.5377e-03, -4.8601e-04, -6.4381e-04,
           9.8697e-06, -7.9683e-04,  1.1753e-04, -9.5557e-02, -5.0718e-04,
          -5.0921e-05, -6.2390e-05, -4.3669e-04, -2.0457e-04, -1.0055e-04,
           8.1602e-04,  6.2830e-04, -2.6809e-04, -7.9199e-04, -9.5649e-02,
          -3.9481e-04, -5.0785e-04, -5.1565e-04,  1.2362e-03, -6.5449e-04,
          -1.4342e-03, -2.3795e-04,  9.5587e-02, -9.2099e-04, -1.1258e-04,
           1.1086e-04,  3.8850e-05,  9.8485e-05,  5.6338e-04, -1.0062e-03,
          -2.3933e-05,  1.1409e-04, -1.1786e-03,  2.0268e-04,  5.5153e-04,
          -1.0575e-03,  1.4533e-04, -6.1543e-04, -3.9971e-04,  9.0829e-04,
          -4.4081e-04,  6.6533e-04,  1.7087e-03, -9.7027e-04, -2.8908e-04,
          -7.8770e-04, -6.3840e-04,  1.1975e-03, -9.5753e-02,  3.9266e-04,
           2.0055e-03,  3.0326e-04,  9.5211e-02,  2.0922e-04, -2.0388e-04,
          -3.2370e-04,  1.5795e-05, -1.5291e-04,  3.3237e-04,  1.5851e-03,
          -7.3310e-04,  3.9155e-04, -6.1989e-04, -7.7464e-04,  9.5404e-02,
          -8.1124e-06,  3.8516e-04, -2.2879e-04, -7.4786e-04,  1.0676e-03,
           7.0075e-04,  9.1740e-04, -8.9611e-04, -7.0558e-04, -1.2066e-03,
           7.8429e-04,  3.3866e-04,  8.2869e-04, -2.0595e-04,  4.9002e-04,
           6.0960e-03, -3.2305e-04,  7.8461e-04,  3.4095e-05, -1.8480e-04,
           1.2319e-03,  1.7207e-03, -1.5760e-03, -4.2448e-04, -1.5116e-04,
           3.9004e-04,  2.5046e-05, -7.8015e-04,  5.4743e-04,  7.2336e-04,
           8.7510e-05,  4.6005e-05, -1.4912e-03, -5.3183e-04,  9.7289e-04,
           2.6156e-04,  3.6086e-04,  4.0306e-03,  5.8189e-04,  2.1448e-04,
           5.9679e-04,  1.1054e-03, -2.3440e-04,  5.8640e-05,  8.3885e-04,
          -3.0705e-04, -8.7337e-04,  1.4986e-03, -5.4668e-04,  5.9138e-04,
           2.6970e-04,  1.2285e-03, -1.3943e-03,  1.1641e-03,  1.4592e-03,
          -4.6989e-04,  4.3211e-04, -1.3801e-03, -7.1196e-04,  3.4265e-04,
           9.7213e-04, -2.0370e-04],
         [-8.1838e-04, -4.3303e-05, -4.0729e-04,  9.8149e-02, -2.5519e-04,
           9.3129e-02,  2.4554e-04, -4.0809e-04, -1.0641e-04,  1.2767e-03,
           1.3010e-03, -3.3570e-04,  2.8421e-04,  4.7246e-05, -6.9466e-04,
           5.0011e-04,  5.7524e-04, -1.3288e-04,  5.6258e-04, -1.5646e-04,
          -1.0958e-03, -4.3869e-04,  5.7323e-04,  8.6686e-04, -5.4952e-06,
           1.1096e-03, -6.6822e-04,  4.2673e-04,  1.1796e-05, -3.8190e-04,
          -7.6093e-04,  2.1726e-03, -2.6907e-04, -2.3717e-04,  1.0213e-03,
           1.1326e-03,  1.3181e-04,  1.3253e-03,  9.4426e-04,  1.1017e-03,
           4.5813e-04, -4.3498e-04, -5.0179e-04,  1.0263e-03,  8.7418e-04,
           2.6063e-04, -1.1601e-03, -5.1591e-05, -3.5656e-04, -8.7091e-04,
           3.2682e-04,  2.1811e-04, -2.8369e-04, -1.4492e-04, -6.9012e-04,
           3.4991e-04, -1.5433e-04,  1.1202e-04, -1.8736e-04,  1.3155e-03,
          -2.5765e-05, -1.0633e-03, -8.3377e-04, -1.3987e-04, -7.7850e-04,
          -3.1095e-04, -5.5467e-04, -5.9059e-04, -9.8198e-02, -8.7342e-04,
           1.1272e-03, -1.5671e-05, -9.8288e-04, -3.1072e-04,  3.6224e-04,
           9.8481e-04, -9.9210e-05, -8.9056e-04, -6.7995e-04, -9.8061e-02,
          -2.6485e-04, -8.5373e-04, -1.6349e-05,  1.0214e-03, -4.3756e-04,
          -9.3087e-04, -6.1501e-04,  9.7988e-02, -3.9988e-04, -2.0638e-04,
           3.4642e-04, -8.3764e-05,  1.2622e-04,  5.9709e-05, -1.4009e-04,
          -8.6783e-04,  6.5119e-04, -5.3596e-05,  4.1195e-04,  1.2936e-03,
          -1.0976e-03,  5.2632e-04, -4.4217e-04, -6.0662e-04,  4.6310e-04,
          -4.0925e-04,  6.8307e-04,  8.9324e-04, -1.9386e-03, -6.4419e-04,
          -8.2331e-04, -1.3803e-04,  6.2739e-04, -9.8167e-02,  1.8976e-04,
           1.9344e-03,  4.7603e-04,  9.8269e-02, -5.6376e-04, -7.3278e-04,
          -1.3940e-03,  2.2129e-04, -1.1878e-04,  1.4746e-04,  9.2865e-04,
          -7.7227e-04,  1.2294e-03, -1.0446e-04, -8.8155e-04,  9.8165e-02,
          -2.1555e-04, -1.1430e-03, -7.8063e-05, -1.1297e-03,  8.4639e-04,
           8.2051e-04,  7.4663e-04, -3.4790e-04, -4.9628e-04, -7.6883e-05,
           1.2002e-04,  1.1961e-04,  5.2147e-04, -5.1391e-04,  9.3716e-04,
           6.4436e-03, -4.9724e-05,  6.1525e-04, -4.5878e-05, -4.2237e-04,
          -1.5427e-04,  2.4501e-03,  7.6620e-04, -1.4065e-03, -1.4961e-04,
           1.2437e-04, -3.3415e-04,  2.2575e-03,  8.6781e-04,  8.1050e-04,
          -6.0751e-04,  7.0880e-04, -1.0526e-03, -6.9238e-04,  1.7480e-03,
          -4.2669e-05,  4.9599e-04,  4.4972e-03,  2.6964e-04, -7.3377e-06,
           7.0061e-04,  1.6213e-03,  2.4795e-06,  7.6213e-05,  2.5600e-04,
          -2.6339e-04, -5.7075e-04,  1.4999e-03, -1.4677e-03, -1.6421e-04,
           2.3738e-05,  1.0927e-03, -7.6555e-04, -2.5951e-04,  1.6238e-03,
          -3.0110e-04,  3.0297e-04, -5.9375e-04, -4.9096e-04,  1.5411e-04,
           6.8483e-04,  2.7809e-04],
         [-6.4251e-03, -8.3382e-04,  6.9919e-03, -1.5508e-02,  6.2706e-03,
          -9.7117e-03,  2.7063e-03,  7.6109e-03,  4.4065e-03,  1.2793e-02,
           8.9416e-03,  1.9387e-03,  1.0264e-02,  1.1268e-02,  4.5471e-03,
          -3.4306e-04,  8.9316e-04,  4.5111e-04,  1.0731e-02,  2.6011e-03,
          -3.0114e-03,  7.6118e-03, -1.6900e-03,  8.7399e-03,  8.8779e-03,
           1.0764e-02,  9.9907e-03,  2.5676e-03,  8.6323e-03,  8.4228e-04,
           9.9708e-03,  1.3110e-02,  6.2488e-03,  7.6793e-04,  8.2619e-04,
           4.9052e-03, -7.1010e-04,  3.1076e-03,  7.5240e-03,  5.7643e-03,
           1.1355e-02,  4.7539e-03,  7.6291e-03,  6.6271e-03,  1.2956e-03,
           4.0295e-03,  3.0162e-04,  1.2667e-02,  6.0524e-04,  9.7760e-03,
           7.6757e-03,  8.9246e-03,  6.1982e-03,  4.5429e-04,  2.3532e-03,
          -6.3261e-04,  1.9578e-03,  1.0355e-02,  1.2386e-02,  4.6042e-04,
           1.8027e-03,  1.5200e-03, -1.4809e-03,  5.3044e-03,  7.2374e-03,
           5.7238e-03,  1.1392e-02,  8.7864e-03,  1.6092e-02,  1.0051e-02,
           1.1678e-03,  2.0184e-03,  7.4002e-03,  5.0125e-03,  7.5455e-03,
           9.4884e-03,  4.8197e-03,  1.7964e-03,  8.0278e-04,  1.5589e-02,
           2.2550e-03,  5.2447e-03,  2.0081e-03,  4.8306e-03,  7.9197e-03,
          -6.3560e-04,  8.8907e-03, -1.6517e-02, -3.2008e-05,  3.6638e-03,
           6.3401e-03,  9.7026e-03,  7.9004e-03,  2.2177e-03,  6.6589e-04,
           2.2534e-03,  4.1878e-03,  1.7150e-04,  7.4279e-04,  4.9581e-04,
          -1.0453e-04,  1.0563e-02,  1.0195e-02,  1.0771e-02,  7.2156e-03,
           2.1447e-03,  1.0305e-02,  5.7021e-03, -2.1670e-04,  8.0525e-03,
           1.0113e-02,  1.0557e-03,  3.7357e-03,  1.5366e-02,  1.5617e-03,
           1.2732e-02,  4.3334e-03, -1.7698e-02, -3.9561e-03,  7.4833e-03,
           6.2943e-03,  1.1345e-02,  7.3089e-03,  1.0212e-02,  1.1030e-02,
           2.7025e-03,  8.6184e-03, -3.1730e-04,  1.1402e-02, -1.6752e-02,
           5.7081e-03, -2.0785e-04,  9.1580e-03,  3.3467e-03,  9.6765e-03,
           8.8234e-03,  1.1880e-02,  1.4491e-04,  3.3411e-03,  1.3367e-03,
           1.2962e-03,  8.0318e-03,  7.9983e-03,  2.6075e-03,  4.8124e-04,
           8.0931e-03,  1.1585e-02,  1.1564e-02,  1.5314e-03,  6.6999e-03,
           2.3074e-03,  1.3624e-02, -3.4318e-04, -4.6257e-04,  1.1807e-02,
           6.7612e-03,  2.7669e-03,  2.4128e-03, -9.6160e-05,  5.7410e-03,
           1.4086e-03,  3.5685e-03,  6.0938e-03, -9.6671e-04,  7.5167e-05,
           9.3113e-03,  9.4040e-03,  9.4525e-03,  5.1267e-03,  1.8901e-03,
           1.5810e-03,  9.4633e-03,  1.1455e-02, -8.3047e-05,  6.4240e-04,
           1.2915e-02,  1.8346e-03,  1.5892e-03,  4.7827e-03,  8.2543e-03,
           1.3842e-03,  9.9019e-03,  1.8834e-03,  2.8109e-03,  6.4494e-03,
           8.0923e-03,  4.8086e-04,  2.3231e-03, -1.2260e-03,  1.2245e-02,
           2.0313e-03,  1.7282e-04],
         [-8.2033e-03, -9.3300e-04,  9.3338e-03, -2.1076e-02,  8.7181e-03,
          -1.2993e-02,  3.5774e-03,  1.0239e-02,  5.2890e-03,  1.6947e-02,
           1.1225e-02,  2.0912e-03,  1.3433e-02,  1.4550e-02,  6.0960e-03,
          -9.8008e-05,  1.4870e-03,  7.4733e-04,  1.4068e-02,  3.2731e-03,
          -2.9840e-03,  9.7996e-03, -1.9832e-03,  1.1361e-02,  1.1367e-02,
           1.3950e-02,  1.3170e-02,  3.3547e-03,  1.1584e-02,  7.7790e-04,
           1.3459e-02,  1.6817e-02,  8.2928e-03,  5.1266e-04,  1.2085e-03,
           6.0558e-03, -6.5609e-04,  3.8277e-03,  9.9661e-03,  7.2759e-03,
           1.4941e-02,  5.6706e-03,  9.7729e-03,  8.5992e-03,  1.4379e-03,
           4.9868e-03, -3.3606e-04,  1.6693e-02,  8.1594e-04,  1.2534e-02,
           9.9164e-03,  1.1707e-02,  8.0440e-03,  7.5281e-04,  2.7360e-03,
          -6.4994e-04,  2.1865e-03,  1.3363e-02,  1.6425e-02,  7.0225e-04,
           2.1871e-03,  2.1721e-03, -1.7766e-03,  7.2434e-03,  9.8415e-03,
           7.5207e-03,  1.4977e-02,  1.1513e-02,  2.1710e-02,  1.3065e-02,
           1.3937e-03,  2.5626e-03,  9.4806e-03,  6.7052e-03,  9.9561e-03,
           1.2369e-02,  6.1549e-03,  2.1681e-03,  1.0615e-03,  2.1117e-02,
           2.7036e-03,  6.8134e-03,  2.8984e-03,  5.8304e-03,  1.0563e-02,
          -6.4702e-04,  1.1625e-02, -2.2548e-02, -1.3855e-04,  4.6974e-03,
           8.2744e-03,  1.2346e-02,  1.0110e-02,  2.4491e-03,  8.7756e-04,
           2.9167e-03,  5.5767e-03,  6.7075e-04,  1.2283e-03,  9.0372e-04,
           4.6157e-05,  1.3777e-02,  1.3702e-02,  1.4037e-02,  9.2180e-03,
           3.3041e-03,  1.3533e-02,  7.0899e-03, -1.9581e-04,  1.0441e-02,
           1.3316e-02,  1.2640e-03,  4.5199e-03,  2.0722e-02,  1.5249e-03,
           1.6748e-02,  5.5072e-03, -2.3207e-02, -4.9267e-03,  1.0065e-02,
           8.2280e-03,  1.4971e-02,  9.6574e-03,  1.3713e-02,  1.4119e-02,
           3.4100e-03,  1.1343e-02, -2.0183e-04,  1.5082e-02, -2.3614e-02,
           7.1539e-03, -3.7551e-04,  1.1839e-02,  4.1130e-03,  1.2699e-02,
           1.1613e-02,  1.5535e-02,  4.6126e-04,  5.1342e-03,  2.2328e-03,
           1.6082e-03,  1.0518e-02,  1.0542e-02,  3.4069e-03,  3.5338e-04,
           1.0172e-02,  1.5067e-02,  1.5276e-02,  1.7595e-03,  8.3848e-03,
           3.0543e-03,  1.7765e-02,  2.0707e-04, -6.7341e-04,  1.5595e-02,
           8.6688e-03,  3.6054e-03,  4.0019e-03, -2.5022e-04,  7.4941e-03,
           1.5832e-03,  4.6601e-03,  8.4652e-03, -1.1792e-03,  4.5832e-05,
           1.2528e-02,  1.2410e-02,  1.2158e-02,  6.6561e-03,  2.2691e-03,
           1.8927e-03,  1.2246e-02,  1.5462e-02,  1.2561e-04,  6.9829e-04,
           1.6578e-02,  2.3693e-03,  1.6088e-03,  5.6640e-03,  1.0919e-02,
           1.6516e-03,  1.2932e-02,  2.4186e-03,  3.2072e-03,  8.4295e-03,
           1.0828e-02,  7.0190e-04,  2.8291e-03, -1.3724e-03,  1.6198e-02,
           2.3805e-03,  3.0619e-04],
         [ 1.4039e-02,  2.7552e-03, -1.6727e-02,  3.5100e-02, -1.6482e-02,
           2.1606e-02, -3.1688e-03, -1.9482e-02, -7.2938e-03, -3.0014e-02,
          -1.9066e-02, -2.3160e-03, -2.3647e-02, -2.4817e-02, -1.2906e-02,
          -1.3728e-03, -2.0163e-03, -3.3286e-03, -2.4779e-02, -4.7740e-03,
           1.5911e-03, -1.7179e-02,  2.0819e-03, -2.0708e-02, -1.6652e-02,
          -2.3632e-02, -2.3737e-02, -8.8082e-03, -2.1958e-02,  4.1722e-04,
          -2.5070e-02, -2.7816e-02, -1.4284e-02, -4.3867e-05, -2.8657e-04,
          -9.1699e-03,  1.1734e-03, -5.4268e-03, -1.7892e-02, -1.1216e-02,
          -2.5446e-02, -8.7349e-03, -1.5305e-02, -1.5294e-02, -1.9509e-03,
          -8.6161e-03,  1.4071e-03, -2.9034e-02, -3.6018e-03, -1.9825e-02,
          -1.7215e-02, -2.1704e-02, -1.3639e-02, -2.9645e-03, -5.5853e-03,
          -1.9132e-03, -1.8505e-03, -2.0633e-02, -2.7235e-02, -2.9597e-03,
          -3.5732e-03, -4.7122e-03,  3.5623e-03, -1.3124e-02, -1.8209e-02,
          -1.3014e-02, -2.5198e-02, -2.0224e-02, -3.6263e-02, -2.2410e-02,
          -1.1913e-05, -4.4625e-03, -1.4276e-02, -1.3065e-02, -1.5990e-02,
          -2.1878e-02, -1.3311e-02, -3.7371e-03, -1.5131e-03, -3.5228e-02,
          -4.0836e-03, -1.2345e-02, -6.1205e-03, -7.5478e-03, -1.9330e-02,
           4.4281e-03, -2.0077e-02,  3.7469e-02,  1.0886e-03, -9.1064e-03,
          -1.4954e-02, -1.9090e-02, -1.7029e-02, -2.2184e-03, -1.2481e-03,
          -4.3537e-03, -8.7091e-03, -2.2445e-03, -4.3111e-03, -1.2142e-03,
          -3.0272e-03, -2.4341e-02, -2.3825e-02, -2.3966e-02, -1.4897e-02,
          -9.5047e-03, -2.3495e-02, -1.1611e-02,  4.1517e-04, -1.7897e-02,
          -2.3243e-02, -6.6363e-04, -7.0712e-03, -3.4628e-02, -1.0522e-03,
          -2.9260e-02, -9.0937e-03,  3.9208e-02,  8.0529e-03, -1.8008e-02,
          -1.4235e-02, -2.5346e-02, -1.7896e-02, -2.5430e-02, -2.2724e-02,
          -6.8631e-03, -2.0644e-02, -1.1139e-03, -2.6075e-02,  3.8702e-02,
          -1.1689e-02, -1.1001e-03, -1.9294e-02, -6.8745e-03, -2.2557e-02,
          -2.0336e-02, -2.6796e-02, -1.3726e-03, -1.2207e-02, -4.2055e-03,
          -2.0644e-03, -1.7818e-02, -1.9513e-02, -5.3634e-03,  3.3528e-04,
          -1.7527e-02, -2.5196e-02, -2.6478e-02,  4.2984e-04, -1.1698e-02,
          -7.9322e-03, -3.0223e-02, -9.7901e-04,  7.6248e-04, -2.6857e-02,
          -1.4353e-02, -6.6975e-03, -6.6950e-03,  3.9162e-04, -1.3061e-02,
          -2.4533e-03, -7.8520e-03, -1.6995e-02,  1.9798e-03, -5.7981e-04,
          -2.3976e-02, -2.3160e-02, -2.1803e-02, -1.3499e-02, -4.4954e-03,
          -2.9509e-03, -2.0771e-02, -2.8993e-02, -1.3502e-04, -3.9988e-03,
          -2.5987e-02, -3.7633e-03, -3.3270e-03, -8.4285e-03, -2.0231e-02,
          -2.7809e-03, -2.3779e-02, -2.3070e-03, -4.2763e-03, -1.5664e-02,
          -2.0075e-02, -1.3693e-03, -3.4385e-03,  1.3730e-03, -2.8769e-02,
          -4.7413e-03, -1.6254e-03]]])

        z = token
        for i in range(b - 1):
            z = torch.cat((z, token), dim=0)

        x = self.bneck(self.stem(x))
        for m in self.block:
            x, z = m(x, z)

        # 转成b个平铺一维向量
        x = self.avg(self.bn(self.conv(x))).view(b, -1)
        # 取第一个token
        z = z.chunk(6, dim=1)
        z = z[0].view(b, -1)
        # 最后一个维度拼接
        out = torch.cat((x, z), -1)

        out = self.head1(out)
        out = self.relu(out)
        out = self.head2(out)
        return out
