import torch
import torch.nn as nn

from torch.nn import init
import torch.nn.functional as F

from mobile_former.mobile import Mobile, MobileDown
from mobile_former.former import Former
from mobile_former.bridge import Former2Mobile


class hswish(nn.Module):
    def forward(self, x):
        out = x * F.relu6(torch.add(x, 3.0)) / 6.0
        return out


class BaseBlock(nn.Module):
    def __init__(self, inp, exp, out, se, stride, heads, dim):
        super(BaseBlock, self).__init__()
        if stride == 2:
            self.mobile = MobileDown(3, inp, exp, out, stride)
        else:
            self.mobile = Mobile(3, inp, exp, out, stride)
        self.former = Former(dim=dim)
        self.former2mobile = Former2Mobile(dim=dim, heads=heads, channel=out)

    def forward(self, x, z):
        # z_out = self.former(z)
        x_hid = self.mobile(x)
        x_out = self.former2mobile(x_hid, z)
        return x_out, z


class MobileFormer(nn.Module):
    def __init__(self, cfg):
        super(MobileFormer, self).__init__()
        # 初始化6*192token
        self.token = nn.Parameter(nn.Parameter(torch.randn(1, cfg['token'], cfg['embed'])))

        # stem 3 224 224 -> 16 112 112
        self.stem = nn.Sequential(
            nn.Conv2d(3, cfg['stem'], kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(cfg['stem']),
            nn.ReLU()
        )
        # bneck 先*2后还原，步长为1，组卷积
        self.bneck = nn.Sequential(
            nn.Conv2d(cfg['stem'], cfg['bneck']['e'], kernel_size=3, stride=cfg['bneck']['s'], padding=1),
            nn.ReLU(),
            nn.Conv2d(cfg['bneck']['e'], cfg['bneck']['o'], kernel_size=1, stride=1),
            nn.BatchNorm2d(cfg['bneck']['o'])
        )

        # body
        self.block = nn.ModuleList()
        for kwargs in cfg['body']:
            # 把{'inp': 12, 'exp': 72, 'out': 16, 'stride': 2, 'heads': 2}和token维度192传进去
            self.block.append(BaseBlock(**kwargs, dim=cfg['embed']))

        inp = cfg['body'][-1]['out']
        exp = cfg['body'][-1]['exp']
        self.conv = nn.Conv2d(inp, exp, kernel_size=1, stride=1, padding=0, bias=False)
        self.bn = nn.BatchNorm2d(exp)
        self.avg = nn.AvgPool2d((7, 7))

        self.head1 = nn.Linear(exp + cfg['embed'], cfg['fc1'])
        self.relu = nn.ReLU()
        self.head2 = nn.Linear(cfg['fc1'], cfg['fc2'])

        self.init_params()

    def init_params(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    init.constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                init.constant_(m.weight, 1)
                init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.normal_(m.weight, std=0.001)
                if m.bias is not None:
                    init.constant_(m.bias, 0)

    def forward(self, x):
        # batch_size
        b = x.shape[0]
        # 因为最开始初始化的是1*6*192，在0维度重复b次，1维度重复1次，2维度重复1次，就形成了b*6*192
        # z = self.token.repeat(b, 1, 1)
        token = torch.Tensor([[[ 8.7078e-04, -2.3461e-04,  9.2687e-04, -1.9517e-01,  2.0897e-03,
          -1.9427e-01, -7.1875e-04,  5.1241e-04, -3.1055e-04, -9.7865e-04,
          -2.0560e-03, -1.1006e-03, -1.3538e-03,  1.2705e-04, -8.9330e-05,
           8.4285e-04, -9.9385e-04, -2.9107e-03, -2.1967e-03,  1.8401e-04,
           8.7501e-04,  9.4046e-05, -4.7442e-04, -3.4130e-05,  4.0732e-04,
          -2.4596e-04, -2.0649e-04,  9.2127e-04, -9.9986e-04,  6.3980e-04,
          -7.2591e-04, -1.4227e-02,  5.5345e-04, -3.8152e-04, -8.1394e-05,
          -7.1106e-04, -3.0354e-04, -1.4627e-04, -4.4282e-04, -1.2365e-03,
          -6.7491e-04,  2.3486e-05, -1.7660e-04, -8.9770e-04, -1.7763e-03,
           1.0762e-05, -1.9868e-03, -1.5058e-04, -1.1105e-03, -1.3210e-03,
          -1.0612e-03,  6.4809e-04, -8.1616e-04,  1.3186e-03,  7.8165e-04,
          -8.9439e-06,  1.2354e-03,  4.0680e-04, -1.6269e-03, -1.2733e-03,
           4.9821e-05, -1.5526e-03,  5.3182e-04, -3.8930e-04,  1.2193e-03,
           3.6198e-05, -6.2027e-04,  3.6698e-04,  1.9514e-01, -2.2874e-04,
          -9.0375e-04, -1.7153e-03, -1.2746e-03,  1.7700e-04,  2.0885e-04,
          -3.0016e-04, -9.1157e-04,  1.8092e-03,  1.6592e-03,  1.9508e-01,
           9.1101e-05, -7.3492e-04, -1.8182e-03,  8.5010e-04,  7.5849e-04,
          -7.9565e-04, -9.5699e-04, -1.9512e-01,  6.1296e-04, -5.2108e-04,
          -7.2344e-04, -2.3971e-04, -1.1362e-03, -1.2955e-03, -8.3743e-04,
           8.2469e-05,  1.1831e-03,  1.2866e-03,  6.1626e-05,  1.2604e-03,
           1.7953e-03,  9.4867e-05,  6.1653e-04, -1.0536e-03,  3.9031e-04,
          -5.3592e-04, -8.5928e-04, -1.1006e-03, -3.9924e-04, -8.4550e-04,
           3.6541e-04, -1.6303e-03, -1.0660e-03,  1.9515e-01, -2.0214e-04,
          -2.2997e-03,  1.2210e-04, -1.9519e-01,  2.3590e-03,  2.9222e-04,
          -3.4941e-04, -7.1911e-04, -1.2641e-03, -9.3215e-04, -1.4803e-03,
           1.9611e-04, -7.3953e-05,  6.7887e-04, -7.5209e-04, -1.9517e-01,
          -1.4236e-03, -2.8349e-04,  7.0389e-05, -1.0020e-03, -1.4033e-03,
           7.3854e-04, -1.4241e-03,  5.2070e-04, -1.2439e-04,  7.3834e-04,
           2.8726e-04, -1.5433e-03, -7.2980e-04, -2.1740e-04,  1.1861e-03,
          -3.3266e-02, -1.3857e-03,  1.2491e-03, -3.3863e-04, -4.2357e-04,
          -1.8705e-03, -2.3821e-03,  5.7594e-04,  1.0913e-04,  7.4460e-04,
          -9.4123e-04,  6.0151e-04,  1.0167e-03,  7.8318e-04, -1.1234e-03,
           4.6888e-04, -3.1197e-04,  5.4695e-04, -3.1399e-04, -1.4875e-03,
          -1.3978e-03,  2.6259e-05, -2.6410e-02, -1.3796e-04, -1.5733e-04,
          -4.4618e-04, -1.7071e-03,  8.5417e-05,  1.4392e-03, -1.1164e-05,
          -1.2969e-03, -6.9951e-04,  7.3492e-04, -1.4379e-03, -9.3222e-04,
          -6.7929e-04, -3.4766e-04, -9.8541e-04, -1.2338e-03, -3.2253e-03,
          -3.4382e-04,  1.4372e-03,  1.2048e-03,  1.3191e-03, -1.3409e-03,
           1.6527e-04, -1.6559e-03],
         [-1.0338e-04,  1.0159e-04,  1.1614e-03,  9.5750e-02, -8.7980e-05,
           9.5423e-02,  3.1710e-04,  4.4188e-04,  3.3201e-04,  1.2569e-03,
           1.1931e-03, -8.4925e-04, -5.3709e-05,  6.0786e-04,  8.8158e-04,
          -6.0812e-04,  8.8013e-04,  8.8364e-04,  1.8538e-04, -1.7544e-03,
          -1.3407e-03, -5.0824e-04,  1.1240e-03, -2.8113e-04,  1.4530e-03,
           9.1490e-04,  5.7738e-04,  3.1042e-04,  3.8649e-04, -8.5937e-04,
           8.8810e-04,  7.9181e-03, -4.3772e-05, -1.7957e-03,  8.6575e-04,
           1.1531e-04, -8.5464e-04, -2.3333e-04,  5.5804e-05,  6.2949e-04,
           5.2057e-04,  6.0210e-04,  6.0155e-04,  1.3028e-03, -4.7730e-04,
           5.9180e-04,  9.3800e-05,  1.1127e-03,  4.0123e-04, -1.6455e-04,
           6.1496e-04,  8.9685e-04,  1.0968e-03,  1.2732e-04,  5.1781e-04,
           1.1934e-03,  1.1719e-03,  7.1615e-04,  6.9050e-04, -3.7930e-04,
          -1.2512e-04,  1.2781e-03,  1.0377e-03,  3.7242e-04,  9.4279e-04,
           3.4649e-04,  2.8538e-04,  1.8957e-04, -9.5723e-02, -2.4080e-05,
           6.3798e-05,  8.0636e-04, -5.7100e-05,  2.3703e-04,  3.7017e-04,
           5.3115e-04, -4.1337e-04, -7.1286e-04, -3.5187e-04, -9.5706e-02,
          -6.3907e-06, -4.8763e-04, -2.0789e-04, -4.6008e-04, -6.2678e-04,
          -5.4233e-04,  1.9461e-04,  9.5723e-02,  3.8368e-04,  8.4168e-04,
           3.7690e-04,  4.5091e-04, -2.0477e-04, -9.4475e-04,  1.6985e-03,
          -5.2909e-04, -8.1121e-05,  9.2212e-04,  7.6919e-04,  5.1982e-04,
          -6.3022e-04,  3.5752e-04,  4.6208e-04, -1.0779e-04,  1.2339e-03,
          -7.4018e-04, -5.9573e-04,  1.5884e-03,  1.6294e-04,  2.1310e-04,
          -4.8419e-04, -1.2758e-03,  4.0410e-04, -9.5741e-02,  1.3984e-04,
           1.8853e-03,  4.4028e-04,  9.5719e-02, -8.1746e-04,  1.0507e-03,
           6.3346e-04, -9.8977e-05, -8.7136e-04,  4.9027e-04,  2.3871e-03,
          -3.1895e-04,  2.9939e-04, -5.1820e-04,  5.9863e-04,  9.5727e-02,
          -5.9211e-04, -8.3489e-04,  2.0268e-04, -6.0188e-04,  7.4177e-05,
           1.5740e-04,  2.0627e-03, -1.1082e-03, -2.8435e-05,  2.4227e-04,
           7.5581e-04, -9.1687e-06,  7.8132e-04,  8.2943e-04, -5.0515e-04,
           1.6732e-02,  1.9846e-04,  1.1352e-03, -2.2244e-04,  6.6588e-04,
          -3.7152e-04,  2.0820e-03,  1.6470e-04,  1.9023e-03,  1.0413e-03,
           5.6584e-04,  6.0629e-04,  5.3161e-04,  4.9181e-04,  1.2525e-03,
          -5.2545e-04, -1.2619e-03,  5.4517e-04,  2.1572e-04, -3.8069e-04,
          -3.6490e-04,  3.5636e-04,  1.2358e-02, -2.4138e-04, -1.1378e-03,
          -4.5577e-04,  1.0662e-03, -2.7338e-04, -1.2301e-04,  2.1985e-04,
           6.0395e-05,  1.0577e-03,  7.6922e-04,  4.6654e-05,  6.9342e-04,
          -3.2407e-04,  3.2250e-04, -7.6659e-04,  3.6997e-04,  4.8187e-04,
           5.4822e-04,  7.7165e-04, -9.0555e-04, -1.2221e-03,  1.2131e-03,
          -2.1252e-04, -1.4709e-03],
         [-2.7350e-04,  2.5675e-04,  1.2314e-03,  9.6090e-02, -7.4987e-06,
           9.5635e-02,  4.5978e-04,  5.1358e-04,  2.5397e-04,  1.3011e-03,
           1.1436e-03, -9.5004e-04, -2.2255e-05,  6.2609e-04,  8.3177e-04,
          -4.7733e-04,  9.9879e-04,  9.6351e-04,  2.3624e-04, -1.7398e-03,
          -1.0279e-03, -4.8236e-04,  1.3449e-03, -3.0884e-04,  1.4792e-03,
           9.0955e-04,  5.6361e-04,  7.6980e-05,  3.9105e-04, -8.9362e-04,
           8.8183e-04,  7.8987e-03, -2.5343e-05, -1.9082e-03,  1.0796e-03,
           1.3074e-04, -6.4734e-04, -3.0425e-04,  9.1130e-05,  5.9059e-04,
           5.5362e-04,  4.7964e-04,  6.1051e-04,  1.3131e-03, -3.8853e-04,
           5.1943e-04, -1.9366e-04,  1.1620e-03,  2.2466e-04, -1.3138e-04,
           5.9769e-04,  9.1118e-04,  1.0441e-03,  1.8600e-04,  4.0366e-04,
           1.4118e-03,  9.6070e-04,  7.2751e-04,  7.0709e-04, -3.5736e-04,
          -2.6653e-04,  1.1906e-03,  1.0605e-03,  3.9816e-04,  9.3370e-04,
           2.9965e-04,  3.4349e-04,  1.0819e-04, -9.6088e-02, -5.7667e-05,
           1.9624e-04,  7.4345e-04, -1.1997e-04,  2.5468e-04,  4.3401e-04,
           5.4205e-04, -5.5842e-04, -8.2031e-04, -3.7166e-04, -9.6045e-02,
           2.5147e-07, -5.6764e-04, -1.4886e-04, -5.0224e-04, -5.7665e-04,
          -4.2119e-04,  1.8195e-04,  9.6061e-02,  4.3920e-04,  8.0866e-04,
           3.6218e-04,  4.4170e-04, -2.0592e-04, -1.0261e-03,  1.8510e-03,
          -6.7362e-04, -1.7873e-05,  1.0710e-03,  8.3914e-04,  6.7425e-04,
          -5.7286e-04,  3.9310e-04,  4.8300e-04, -1.0564e-04,  1.2086e-03,
          -7.3206e-04, -5.9069e-04,  1.4803e-03,  8.7497e-05,  1.6293e-04,
          -4.8265e-04, -1.1830e-03,  2.7079e-04, -9.6081e-02,  1.0114e-04,
           1.8816e-03,  4.2350e-04,  9.6129e-02, -8.5413e-04,  9.6774e-04,
           5.0626e-04, -6.7806e-05, -8.3614e-04,  4.8122e-04,  2.3205e-03,
          -2.7958e-04,  3.8676e-04, -4.2098e-04,  6.0442e-04,  9.6105e-02,
          -6.0214e-04, -1.0434e-03,  2.1582e-04, -7.1073e-04,  6.4696e-05,
           1.8047e-04,  2.0594e-03, -1.0130e-03, -2.0757e-05,  4.0845e-04,
           6.2333e-04, -3.3728e-05,  7.6467e-04,  7.9062e-04, -4.5040e-04,
           1.6671e-02,  2.6757e-04,  1.1534e-03, -2.5104e-04,  5.9378e-04,
          -5.7523e-04,  2.1605e-03,  5.5994e-04,  1.7485e-03,  1.0765e-03,
           5.4506e-04,  5.6125e-04,  8.7276e-04,  4.8104e-04,  1.2532e-03,
          -6.4174e-04, -1.2085e-03,  5.9102e-04,  1.6798e-04, -1.9148e-04,
          -3.8610e-04,  3.7455e-04,  1.2328e-02, -2.7758e-04, -1.2426e-03,
          -4.4802e-04,  1.0864e-03, -2.3295e-04, -1.0661e-04,  8.2231e-05,
           8.1034e-05,  1.1309e-03,  7.1355e-04, -1.0355e-04,  6.0166e-04,
          -4.7293e-04,  3.1036e-04, -6.6687e-04,  9.6108e-05,  4.7436e-04,
           5.7490e-04,  8.0977e-04, -7.9538e-04, -1.1844e-03,  1.1962e-03,
          -2.7504e-04, -1.3875e-03],
         [-7.2290e-03, -1.4453e-03,  7.1409e-03, -1.8478e-02,  6.3087e-03,
          -1.6659e-02,  5.6859e-04,  9.0067e-03,  1.9413e-03,  1.2937e-02,
           9.7768e-03,  5.9482e-04,  8.6813e-03,  1.0797e-02,  4.8068e-03,
           7.3519e-04,  8.4295e-05,  2.4668e-03,  1.1009e-02,  2.3470e-03,
          -7.2860e-04,  8.8551e-03, -1.5054e-03,  9.8886e-03,  9.0638e-03,
           1.2411e-02,  1.0466e-02,  1.9007e-03,  8.8802e-03,  1.9008e-03,
           1.0066e-02,  1.2270e-02,  6.4413e-03, -6.1446e-04, -5.0609e-04,
           2.8952e-03, -2.4460e-04,  1.6141e-03,  9.6739e-03,  6.3233e-03,
           1.2006e-02,  3.5235e-03,  7.8263e-03,  7.5875e-03, -3.4685e-04,
           5.7108e-03,  2.7272e-04,  1.2879e-02,  2.3777e-03,  1.0740e-02,
           6.0301e-03,  7.8271e-03,  7.7682e-03,  1.3847e-03,  3.2335e-03,
          -5.8350e-04, -6.3511e-04,  9.1952e-03,  1.2660e-02, -7.8152e-04,
           4.9187e-04, -1.1846e-03, -1.6983e-03,  4.5579e-03,  9.2835e-03,
           4.0016e-03,  1.1761e-02,  9.3818e-03,  1.8650e-02,  8.9472e-03,
           6.5626e-04,  2.5539e-03,  7.8568e-03,  5.4897e-03,  5.7449e-03,
           1.0480e-02,  6.3285e-03,  9.5805e-04,  1.1719e-03,  1.8501e-02,
           3.6444e-04,  5.7894e-03,  2.0813e-03,  2.6723e-03,  9.3999e-03,
          -2.1326e-03,  8.8238e-03, -1.8813e-02,  1.5326e-04,  4.1716e-03,
           5.1875e-03,  1.0453e-02,  1.0063e-02,  6.4028e-04, -1.1342e-03,
           2.3073e-03,  4.4014e-03,  1.4469e-03, -1.6028e-04,  3.7262e-04,
           8.6101e-04,  1.2151e-02,  1.1276e-02,  1.0730e-02,  6.5148e-03,
           2.0803e-03,  1.4010e-02,  6.0238e-03, -8.2352e-04,  9.7847e-03,
           1.0435e-02,  6.9200e-04,  1.5822e-03,  1.8418e-02,  1.0355e-03,
           1.3448e-02,  4.0473e-03, -1.9099e-02, -6.2371e-03,  9.5935e-03,
           8.1545e-03,  1.1547e-02,  8.6425e-03,  1.1229e-02,  9.0909e-03,
           1.7209e-03,  8.6192e-03,  6.2588e-04,  9.7480e-03, -1.8954e-02,
           6.1032e-03, -7.2199e-04,  8.9899e-03,  1.0437e-03,  8.7694e-03,
           8.9985e-03,  1.2563e-02,  6.2884e-04,  3.4535e-03,  1.6697e-04,
           1.6986e-04,  9.9081e-03,  1.0719e-02,  4.8729e-04,  2.6942e-04,
           9.8568e-03,  1.1358e-02,  9.5669e-03, -2.5064e-04,  5.6623e-03,
           3.1230e-03,  1.2502e-02,  7.2540e-04, -1.6850e-04,  1.1025e-02,
           6.0517e-03,  2.6418e-03,  2.3015e-03,  1.0045e-03,  4.8062e-03,
           2.4904e-04,  2.1395e-03,  7.3065e-03, -4.7762e-04, -2.9322e-04,
           1.2287e-02,  8.1948e-03,  1.2452e-02,  6.4023e-03,  2.1757e-03,
           1.3557e-03,  9.4611e-03,  1.0924e-02, -1.5570e-04,  1.0569e-03,
           1.1991e-02, -4.0018e-04,  3.4930e-04,  2.5910e-03,  1.1612e-02,
          -1.4813e-04,  1.3334e-02,  1.2035e-03,  9.4981e-04,  1.0065e-02,
           1.0083e-02, -1.5236e-04,  9.3059e-04,  2.2870e-06,  1.3192e-02,
           2.3357e-03, -3.9697e-04],
         [-8.0691e-03, -1.7099e-03,  8.3907e-03, -2.2401e-02,  7.3778e-03,
          -2.0100e-02,  9.1769e-04,  1.0674e-02,  2.3530e-03,  1.5181e-02,
           1.1429e-02,  5.7952e-04,  1.0492e-02,  1.2690e-02,  5.3923e-03,
           1.2676e-03, -7.3068e-05,  2.6438e-03,  1.2927e-02,  2.6343e-03,
          -2.6744e-04,  1.0504e-02, -1.6886e-03,  1.1565e-02,  1.0957e-02,
           1.4602e-02,  1.2043e-02,  2.0354e-03,  1.0625e-02,  2.0465e-03,
           1.2066e-02,  1.4351e-02,  7.7073e-03, -4.8056e-04, -2.8986e-04,
           3.2691e-03, -2.2579e-05,  1.8513e-03,  1.1611e-02,  7.2239e-03,
           1.4444e-02,  4.2127e-03,  9.3087e-03,  8.9660e-03, -1.7625e-04,
           6.7665e-03,  1.3041e-04,  1.5023e-02,  2.5115e-03,  1.2647e-02,
           7.3691e-03,  9.3972e-03,  9.0510e-03,  1.5571e-03,  3.4285e-03,
          -8.1468e-04, -8.7884e-04,  1.1092e-02,  1.4903e-02, -8.6669e-04,
           5.3523e-04, -1.1607e-03, -1.7066e-03,  5.4058e-03,  1.0809e-02,
           4.8736e-03,  1.4039e-02,  1.1074e-02,  2.2600e-02,  1.0564e-02,
           8.1018e-04,  2.6949e-03,  9.2826e-03,  6.5664e-03,  6.9980e-03,
           1.2648e-02,  7.1148e-03,  1.0495e-03,  1.2038e-03,  2.2423e-02,
           4.6606e-04,  6.6434e-03,  2.2486e-03,  3.0727e-03,  1.1015e-02,
          -2.2237e-03,  1.0548e-02, -2.2829e-02,  1.5124e-04,  4.5693e-03,
           6.1579e-03,  1.2223e-02,  1.1900e-02,  9.7381e-04, -1.1348e-03,
           2.3791e-03,  5.0025e-03,  1.6148e-03, -1.4416e-04,  4.1822e-04,
           9.7158e-04,  1.4146e-02,  1.3399e-02,  1.2923e-02,  7.8643e-03,
           2.5521e-03,  1.6399e-02,  7.0054e-03, -9.3939e-04,  1.1651e-02,
           1.2316e-02,  7.8859e-04,  1.7816e-03,  2.2310e-02,  8.6113e-04,
           1.5849e-02,  4.4207e-03, -2.3088e-02, -6.9879e-03,  1.1070e-02,
           9.4566e-03,  1.3695e-02,  1.0329e-02,  1.3347e-02,  1.0934e-02,
           1.9697e-03,  1.0183e-02,  5.8555e-04,  1.1662e-02, -2.3085e-02,
           6.9737e-03, -7.0598e-04,  1.0543e-02,  1.2377e-03,  1.0658e-02,
           1.0709e-02,  1.4815e-02,  1.0142e-03,  4.3571e-03,  3.4876e-04,
           2.5559e-04,  1.1681e-02,  1.2528e-02,  5.7472e-04,  4.4517e-04,
           1.1185e-02,  1.3538e-02,  1.1517e-02, -2.2250e-04,  6.4578e-03,
           3.4842e-03,  1.4793e-02,  1.0324e-03, -3.0507e-04,  1.3189e-02,
           7.2251e-03,  2.8070e-03,  2.9400e-03,  7.3320e-04,  5.8492e-03,
           3.5965e-04,  2.3777e-03,  8.4828e-03, -3.4605e-04, -2.3743e-04,
           1.4579e-02,  1.0004e-02,  1.4191e-02,  7.5550e-03,  2.1619e-03,
           1.4498e-03,  1.0991e-02,  1.3095e-02,  2.3160e-05,  1.1646e-03,
           1.4313e-02, -3.1509e-04,  2.7906e-04,  2.8367e-03,  1.3679e-02,
          -8.7571e-05,  1.5573e-02,  1.5201e-03,  1.0768e-03,  1.1616e-02,
           1.1741e-02, -8.1840e-05,  1.3558e-03, -4.8883e-05,  1.5532e-02,
           2.5910e-03, -3.6868e-04],
         [ 1.2297e-02,  2.1780e-03, -1.4524e-02,  4.0165e-02, -1.0340e-02,
           3.5934e-02, -2.9337e-03, -2.0493e-02, -7.7238e-03, -2.7378e-02,
          -2.1711e-02,  6.8431e-04, -2.1440e-02, -2.2828e-02, -7.5933e-03,
          -3.1524e-03,  1.0033e-03, -2.7266e-03, -2.5548e-02, -1.2149e-03,
           2.1041e-03, -2.0736e-02,  1.4818e-04, -1.9861e-02, -2.2361e-02,
          -2.7719e-02, -1.9361e-02, -4.5639e-03, -2.1617e-02, -1.5654e-03,
          -2.4117e-02, -2.6245e-02, -1.3872e-02,  2.0101e-04, -1.9725e-03,
          -7.0063e-03, -2.8251e-03, -4.1049e-03, -2.2950e-02, -1.3705e-02,
          -2.9449e-02, -1.0479e-02, -1.6405e-02, -1.8438e-02, -1.4351e-03,
          -1.4652e-02,  7.6184e-04, -2.6021e-02, -2.1504e-03, -2.1939e-02,
          -1.7936e-02, -1.9048e-02, -1.6878e-02, -3.6190e-03, -1.6848e-03,
           1.2134e-03, -6.9554e-04, -2.3483e-02, -2.5536e-02,  2.5925e-03,
          -9.6482e-04, -1.3973e-03, -7.2308e-04, -9.8778e-03, -1.7360e-02,
          -1.0290e-02, -2.6024e-02, -1.9080e-02, -4.0531e-02, -2.0475e-02,
          -1.0363e-03, -1.8664e-03, -1.6218e-02, -1.1657e-02, -1.5835e-02,
          -2.7147e-02, -1.1882e-02, -2.5038e-03, -1.5053e-03, -4.0204e-02,
          -2.0830e-03, -1.1881e-02, -2.6967e-03, -5.5305e-03, -1.9130e-02,
           3.5377e-03, -1.9424e-02,  4.0917e-02,  1.6937e-03, -7.7170e-03,
          -1.3760e-02, -2.1228e-02, -2.3193e-02, -2.4281e-03, -1.8094e-03,
          -2.8115e-05, -6.6208e-03, -1.6362e-04, -3.5640e-04, -1.8356e-03,
          -1.4679e-03, -2.4533e-02, -2.4787e-02, -2.5190e-02, -1.7903e-02,
          -5.1135e-03, -2.7522e-02, -1.4357e-02,  1.1004e-04, -2.0916e-02,
          -2.2552e-02, -8.1020e-04, -1.0900e-03, -4.0014e-02,  1.0906e-03,
          -2.8913e-02, -6.0961e-03,  4.1460e-02,  1.1182e-02, -1.7824e-02,
          -1.6125e-02, -2.5545e-02, -1.9858e-02, -2.4729e-02, -2.4665e-02,
          -3.1995e-03, -1.9468e-02, -5.6640e-04, -2.2901e-02,  4.1313e-02,
          -1.2139e-02,  1.4874e-04, -1.8727e-02, -5.1531e-03, -2.3276e-02,
          -2.1007e-02, -2.7019e-02, -1.9107e-03, -1.0860e-02, -7.4491e-04,
          -1.3268e-03, -2.1887e-02, -2.2330e-02, -2.5011e-03, -1.7243e-03,
          -1.9076e-02, -2.6147e-02, -2.3283e-02,  3.4059e-04, -1.1563e-02,
          -4.3623e-03, -2.9431e-02, -5.0257e-04, -6.3627e-04, -2.5998e-02,
          -1.6787e-02, -3.3120e-03, -9.1538e-03,  1.9082e-03, -1.5269e-02,
          -1.9136e-03, -3.3716e-03, -1.5814e-02, -2.4805e-03, -7.5318e-04,
          -2.7601e-02, -2.1953e-02, -2.3753e-02, -1.7236e-02, -1.2413e-03,
          -2.1207e-03, -2.0999e-02, -2.6443e-02, -1.9048e-03, -5.1555e-03,
          -2.6184e-02, -1.6565e-03, -2.7397e-04, -4.4460e-03, -2.6441e-02,
          -1.6195e-03, -2.8105e-02, -3.6798e-04, -3.3487e-03, -2.0805e-02,
          -1.9267e-02,  8.8991e-04, -1.5946e-03,  4.9255e-04, -2.8664e-02,
          -6.4183e-03, -2.5476e-04]]]).cuda()

        z = token
        for i in range(b - 1):
            z = torch.cat((z, token), dim=0)

        x = self.bneck(self.stem(x))
        for m in self.block:
            x, z = m(x, z)

        # 转成b个平铺一维向量
        x = self.avg(self.bn(self.conv(x))).view(b, -1)
        # 取第一个token
        z = z.chunk(6, dim=1)
        z = z[0].view(b, -1)
        # 最后一个维度拼接
        out = torch.cat((x, z), -1)

        out = self.head1(out)
        out = self.relu(out)
        out = self.head2(out)
        return out
